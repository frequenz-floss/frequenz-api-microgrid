name: frequenz-api-microgrid

on: [pull_request, push]

jobs:
  protolint:
    runs-on: ubuntu-20.04

    steps:
      - name: Fetch sources
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Get protolint
        run: |
          # checksum taken from: https://github.com/yoheimuta/protolint/releases/download/v0.38.1/checksums.txt
          echo "c1a43f352da6f96f3e60efe33438eaca6148526e6145d9bbd77c40cebc9895a6  protolint_0.38.1_Linux_x86_64.tar.gz" > checksum.txt

          curl -LO https://github.com/yoheimuta/protolint/releases/download/v0.38.1/protolint_0.38.1_Linux_x86_64.tar.gz \
          && sha256sum --check checksum.txt \
          && tar xf protolint_0.38.1_Linux_x86_64.tar.gz \
          && chmod +x protolint \
          && sudo mv protolint /usr/local/bin/protolint

      - name: Run protolint
        run: protolint lint proto

  gen-docs:
    runs-on: ubuntu-20.04

    steps:
      - name: Fetch sources
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Generate documentation
        run: |
          docker run --rm -v $PWD:$PWD pseudomuto/protoc-gen-doc \
            -I $PWD/proto \
            -I $PWD/submodules/api-common-protos \
            -I $PWD/submodules/frequenz-api-common/proto \
            --doc_opt=markdown,gen-docs.md --doc_out=$PWD \
            $(find $PWD/proto -name *.proto)

      - name: Write summary
        run: cat gen-docs.md > $GITHUB_STEP_SUMMARY

  tests:
    strategy:
      matrix:
        os:
          - ubuntu-20.04
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Fetch sources
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install required Python packages
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox

      - name: Run tox
        run: tox -r

  build-dist:
    runs-on: ubuntu-20.04
    steps:
      - name: Fetch sources
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -U build

      - name: Build the source and binary distribution
        run: python -m build

      - name: Upload dist files
        uses: actions/upload-artifact@v3
        with:
          name: frequenz-api-microgrid-dist
          path: dist/
          if-no-files-found: error

  create-github-release:
    needs: ["protolint", "gen-docs", "tests", "build-dist"]
    # Create a release only on tags creation
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    permissions:
      # We need write permissions on contents to create GitHub releases and on
      # discussions to create the release announcement in the discussion forums
      contents: write
      discussions: write
    runs-on: ubuntu-20.04
    steps:
      - name: Download dist files
        uses: actions/download-artifact@v3
        with:
          name: frequenz-api-microgrid-dist
          path: dist

      - name: Download RELEASE_NOTES.md
        run: |
          set -ux
          gh api \
              -X GET \
              -f ref=$REF \
              -H "Accept: application/vnd.github.raw" \
              "/repos/$REPOSITORY/contents/RELEASE_NOTES.md" \
            > RELEASE_NOTES.md
        env:
          REF: ${{ github.ref }}
          REPOSITORY: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release
        run: |
          set -ux
          extra_opts=
          if echo "$REF_NAME" | grep -- -; then extra_opts=" --prerelease"; fi
          gh release create \
            -R "$REPOSITORY" \
            --discussion-category announcements \
            --notes-file RELEASE_NOTES.md \
            --generate-notes \
            $extra_opts \
            $REF_NAME \
            dist/*
        env:
          REF_NAME: ${{ github.ref_name }}
          REPOSITORY: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-to-pypi:
    needs: ["create-github-release"]
    runs-on: ubuntu-20.04
    permissions:
      # For trusted publishing. See:
      # https://blog.pypi.org/posts/2023-04-20-introducing-trusted-publishers/
      id-token: write
    steps:
      - name: Download dist files
        uses: actions/download-artifact@v3
        with:
          name: frequenz-api-microgrid-dist
          path: dist

      - name: Publish the Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
